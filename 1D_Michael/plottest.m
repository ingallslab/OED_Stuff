numFits = 1;
numExp = 20;
numTrials = 200;
datasrc = 'SSA';    %SSA, Normal
opt = 'D_Optimal';  %Ds_Optimal, D_Optimal, LinSpace

%   SSA_Linspace and Norm_Linspace_LNA are datasets generated respectively
%   from normally distributed data and from data generated by an SSA
%   directly. Each defaults to the LinSpace optimality setting, which is by
%   default semi-linearly spaced (though the density of experiments is
%   twice as large in the bistable region, simply due to how the SSA data
%   was generated). We compare this to the Ds-Optimal and D-Optimally
%   distributed data, which is generated based off of an OED procedure.

Omega = 60;

thetas=[];

addpath('/Users/mrastwoo/Documents/MATLAB/Casadi/casadi-osx-matlabR2015a-v3.4.5')
import casadi.*
close all

par_true = [0.5,3,9,3,-18.1,111.7];


x_sym = SX.sym('x_sym');
u_sym = SX.sym('u_sym');
Omega_sym = SX.sym('Omega_sym');

a0_sym = SX.sym('a0_sym');
a_sym = SX.sym('a_sym');
K_sym = SX.sym('K_sym');
n_sym = SX.sym('n_sym');

theta_sym=[a0_sym a_sym K_sym n_sym];
c0_sym = SX.sym('c0_sym');
c1_sym = SX.sym('c1_sym');
c_sym=[c0_sym c1_sym];
par_sym=[theta_sym c_sym];

g=a0_sym+a_sym*((u_sym+x_sym).^n_sym)./(K_sym+(u_sym+x_sym).^n_sym)-x_sym;
g_x=jacobian(g,x_sym);

sigma2=-(a0_sym+a_sym*((u_sym+x_sym).^n_sym)./(K_sym+(u_sym+x_sym).^n_sym)+x_sym)/(2*Omega_sym*g_x);
sigma_func = Function('sigma_func',{theta_sym,Omega_sym,u_sym,x_sym},{sqrt(sigma2)});

pi0=1/(1+exp(-(c0_sym+c1_sym*u_sym)));
pi0_func = Function('pi0_func',{par_sym,u_sym},{pi0});
numNans=-0;

u = [ linspace(0,0.1,32) linspace(0.1,0.2,64) linspace(0.2,0.3,32)]; 

xVals = cell(numFits,126);
hold on
for i=1:126
    dinfo = dir(fullfile('1D_Michael/drive_W60'));
    dinfo([dinfo.isdir]) = [];
    dinfo = dinfo(2:end);
    path=strcat('1D_Michael/drive_W60/SSA_Data_60_u=',num2str(u(i),'%1.6f'),'.txt');
    path2=strcat('1D_Michael/drive_W60/',dinfo(i).name);
    
    if sum(path2 ~= path)<=4
        tmp = load(dinfo(i).name,'.txt');
    end
    for j = 1:numFits
        data = datasample(tmp,200,'Replace',false);
        xVals{j,i} = data;
        scatter(ones(size(xVals{j,i},1),1)*u(i),xVals{j,i});
    end
    
end
hold off